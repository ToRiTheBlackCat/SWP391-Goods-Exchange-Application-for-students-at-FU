_context = new();
var exchange = await _context.Exchanges.Include(e => e.ExchangeDetails).FirstOrDefaultAsync(e => e.ExchangeId == exchangeId);
if (exchange == null || exchange.Status != 3)
{
    return (false, "Exchange doesn't exist or Status is invalid!");
}

//Check availability of product
var product = await _context.Products.FirstOrDefaultAsync(e => e.ProductId == exchange.ProductId && e.Status == 1);
if (product == null)
    return (false, "Your product currently is currently not available for exchanging! (Check if it has been banned or removed)");

//Check availability of ExchangeProduct entity
var exchangeProduct = new Product();
if (exchange.ExchangeDetails.SingleOrDefault()!.ProductId != null)
{
    exchangeProduct = await _context.Products.FirstOrDefaultAsync(e => e.ProductId == exchange.ExchangeDetails.Single()!.ProductId && e.Status == 2);
    if (exchangeProduct == null)
        return (false, "Your product currently is currently not available for exchanging! (Check if it has been banned or removed)");
}

var buyerId = exchange.UserId;
var sellerId = product.UserId;

//Transfer the owner ship of products (If there is a product offer)
if (exchangeProduct != null)
{
    exchangeProduct.Status = 0;     //set to disabled
    exchangeProduct.UserId = sellerId;   //set ownership to seller
    //await _pro_repo.UpdateProductAsync(exchangeProduct);
}

product.Status = 0;     //set to disabled
product.UserId = buyerId;    //set ownership to buyer
//await _pro_repo.UpdateProductAsync(product);

exchange.Status = 1;

//Cancel every unaccepted exchange requests to this product
await _context.Exchanges.Include(e => e.ExchangeDetails).ThenInclude(ed => ed.Product).Where(e => e.ProductId == product.ProductId).ForEachAsync(e => 
                                                                                {
                                                                                    e.Status = 0;
                                                                                    if(e.ExchangeDetails.First().Product != null)
                                                                                    {
                                                                                        var product = e.ExchangeDetails.First().Product!;
                                                                                        product.Status = product.Status == 2 ? 1 : product.Status;
                                                                                    }
                                                                                });
await _context.SaveChangesAsync();